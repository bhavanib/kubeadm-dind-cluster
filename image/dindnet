#!/bin/bash
# Copyright 2017 Mirantis
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o errexit
set -o nounset
set -o pipefail
set -o errtrace
set -x

function get_ipv4_info {
  local from_intf=$1
  IPV4_CIDR=$(ip addr show $from_intf | grep -w inet | awk '{ print $2; }')
  IPV4="$(echo ${IPV4_CIDR} | sed 's,/.*,,')"
}

function get_ipv6_info {
  local from_intf=$1
  IPV6_CIDR="$(ip addr show $from_intf | grep -w inet6 | grep -i global | head -1 | awk '{ print $2; }')"
  IPV6="$(echo ${IPV6_CIDR} | sed 's,/.*,,')"
}

function dind::setup-bridge {
  if [[ ! -z "$(ip addr show dind0 2>/dev/null)" ]]; then
    return  # Bridge is already set up
  fi

  ip link add dind0 type bridge
  if [[ "${IP_MODE}" = "ipv6" ]]; then
    ip -6 addr add "${POD_NET_PREFIX}::1/${POD_NET_SIZE}" dev dind0
    ip -6 route add ${DNS64_PREFIX_CIDR} via ${LOCAL_NAT64_SERVER}
  else
    ip addr add "${POD_NET_PREFIX}.1/${POD_NET_SIZE}" dev dind0
  fi
  # To prevent MAC on dind0 from dynamically changing, create a dummy I/F enslaved in
  # dind0 and set the MAC of dind0 to match.
  ip link add v1 type veth peer name v2
  ip link set dev v1 master dind0
  DIND0_MAC="$(ip a show v1 | grep link/ether | awk  '{ print $2; }')"
  ip link set dev dind0 address $DIND0_MAC

  ip link set dind0 up
}

function dind::setup-config-file {
  if [[ "${IP_MODE}" = "ipv6" ]]; then
    NETWORK="${POD_NET_PREFIX}::"
    DEFAULT_GW="${POD_NET_PREFIX}::1"
    DEFAULT_ROUTE="::/0"
  else
    NETWORK="${POD_NET_PREFIX}.0"
    DEFAULT_GW="${POD_NET_PREFIX}.1"
    DEFAULT_ROUTE="0.0.0.0/0"
  fi
  echo "Subnet ${NETWORK}/${POD_NET_SIZE}"
  CONFIG_FILE="/etc/cni/net.d/cni.conf"
  mkdir -p "$(dirname "${CONFIG_FILE}")"
  # NOTE: hairpin mode for CNI bridge breaks Virtlet networking,
  # to be investigated & fixed. For now, default is false for IPv4
  # and true for IPv6, unless overridden.
  cat >${CONFIG_FILE} <<CFG_EOF
{
    "cniVersion": "0.3.0",
    "name": "dindnet",
    "type": "bridge",
    "bridge": "dind0",
    "isDefaultGateway": true,
    "hairpinMode": ${USE_HAIRPIN},
    "ipMasq": true,
    "ipam": {
        "type": "host-local",
        "subnet": "${NETWORK}/${POD_NET_SIZE}",
        "gateway": "${DEFAULT_GW}"
    }
}
CFG_EOF
  echo "Config file created: ${CONFIG_FILE}"
}

function dind::make-kubelet-extra-dns-args {
    if [[ "${IP_MODE}" = "ipv6" ]]; then
	# Create drop-in file here, where we know the DNS IP.
	mkdir -p /etc/systemd/system/kubelet.service.d
	cat >/etc/systemd/system/kubelet.service.d/20-extra-dns-args.conf <<EOF
[Service]
Environment="KUBELET_DNS_ARGS=--cluster-dns=${DNS_SVC_IP} --cluster-domain=cluster.local"
EOF
	echo "Using DNS ${DNS_SVC_IP} for kubelet in IPv6 mode"
    fi
}


# ******************** START ********************
get_ipv4_info eth0
if [[ "${IP_MODE}" = "ipv6" ]]; then
  get_ipv6_info eth0
fi
if [[ ! -z "${POD_NET_PREFIX:-}" && ${POD_NET_SIZE:-0} -ne 0 ]]; then
  dind::setup-bridge
  dind::setup-config-file
  dind::make-kubelet-extra-dns-args
fi

if [[ "${IP_MODE}" = "ipv6" ]]; then
  if ! grep -q '#fixed#' /etc/resolv.conf; then
    # TODO: check if this trickery is still needed, esp. for the hosts file
    # (instead of using sed -i)  
    sed -e "s/^${IPV4}/${IPV6}/g" /etc/hosts > /etc/hosts.updated
    cp /etc/hosts /etc/hosts.orig
    cat /etc/hosts.updated >/etc/hosts
    # Removed embedded docker DNS, as we'll only be using IPv6, which is already in resolv.conf
    sed "s/^nameserver.*127\.0\.0\.11/# Removed 127.0.0.11/" /etc/resolv.conf >/etc/resolv.conf.updated
    cp /etc/resolv.conf /etc/resolv.conf.orig
    cat /etc/resolv.conf.updated >/etc/resolv.conf
    (echo; echo '#fixed#') >>/etc/resolv.conf
    echo "Host and DNS info updated"
  fi
  echo "Setup completed for IPv6"
  set +x
  while true; do
      sleep 1  # Keep service running, so actions not attempted multiple times
  done
else
  if ! grep -q '#fixed#' /etc/resolv.conf; then
    # make docker's kube-dns friendly
    old_ns="$(awk '/^nameserver/ {print $2; exit}' /etc/resolv.conf)"
    if [[ -z ${old_ns} ]]; then
      echo "WARNING: couldn't get nameserver" >&2
      exit 1
    fi
    # sed -i doesn't work here because of docker's handling of /etc/resolv.conf
    sed "s/^nameserver.*/nameserver ${IPV4}/" /etc/resolv.conf >/etc/resolv.conf.updated
    cp /etc/resolv.conf /etc/resolv.conf.orig
    cat /etc/resolv.conf.updated >/etc/resolv.conf
    (echo; echo '#fixed#') >>/etc/resolv.conf
    echo "Setup completed for IPv4"
  else
    # Already switched from built-in DNS server, so use original value for socat 
    old_ns="127.0.0.11"
  fi
  while true; do
    socat udp4-recvfrom:53,reuseaddr,fork,bind=${IPV4} UDP:${old_ns}:53 || true
    echo "WARNING: restarting socat" >&2
  done
fi
